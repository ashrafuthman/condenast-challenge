{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nexport const SITE_NAME = 'techcrunch.com';\nexport const BASE_URL = `https://${SITE_NAME}/wp-json/wp/v2`;\nexport const POSTS_LIMIT = 4;\nexport const searchPosts = async (keyword, page = 1) => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?search=${keyword}&page=${page}`);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const fetchPosts = async (limit = POSTS_LIMIT, page = 1) => {\n  console.log('fetching posts...');\n\n  try {\n    const res = await fetch(`${BASE_URL}/posts?per_page=${limit}&page=${page}`);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const fetchCategories = async () => {\n  try {\n    const res = await fetch(`${BASE_URL}/categories`);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    return console.error('failed to fetch categories:', err);\n  }\n};\nexport const fetchCategoryBySlug = async slug => {\n  const res = await fetch(`${BASE_URL}/categories?slug=${slug}`);\n  const data = await res.json();\n  return data[0];\n};\nexport const fetchCategoryTitle = async id => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?categories=${id}`);\n    const data = await res.json();\n    return data.title.rendered;\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const fetchCategoryPosts = async (categoryId, limit = POSTS_LIMIT, page = 1) => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?categories=${categoryId}&per_page=${limit}&page=${page}`);\n    const data = await res.json();\n    return data;\n  } catch (err) {\n    return console.error(err);\n  }\n};\nexport const fetchAllCategories = async () => {\n  const categories = await fetchCategories();\n  return Promise.all(categories.map(async category => {\n    return {\n      info: category,\n      posts: await fetchCategoryPosts(category.id)\n    };\n  }));\n};\nexport const fetchArticle = async slug => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?slug=${slug}`);\n    const data = await res.json();\n    return data[0];\n  } catch (err) {\n    return console.error('fetch article error:', err);\n  }\n};\nexport const fetchImage = async (img, SIZE) => {\n  const imageSize = sizes => {\n    if (sizes.medium) {\n      return sizes.medium.source_url;\n    } else if (sizes.large) {\n      return sizes.large.source_url;\n    } else {\n      return sizes.full.source_url;\n    }\n  };\n\n  try {\n    const res = await fetch(`${BASE_URL}/media/${img}`);\n    const data = await res.json();\n    const sizes_2 = data.media_details.sizes;\n\n    if (!SIZE) {\n      return imageSize(sizes_2);\n    } else {\n      switch (SIZE) {\n        case 'medium':\n          console.log('medium');\n          return sizes_2.medium ? sizes_2.medium.source_url : imageSize(sizes_2);\n\n        case 'large':\n          console.log('large');\n          return sizes_2.large ? sizes_2.large.source_url : imageSize(sizes_2);\n\n        case 'full':\n          console.log('full');\n          return sizes_2.full ? sizes_2.full.source_url : imageSize(sizes_2);\n      }\n    }\n  } catch (err) {\n    return console.error('unable to fetch img:', img, err);\n  }\n};","map":{"version":3,"sources":["/home/ashraf/code/ashrafuthman/condenast-challenge/lib/api.js"],"names":["fetch","SITE_NAME","BASE_URL","POSTS_LIMIT","searchPosts","keyword","page","res","data","json","err","console","error","fetchPosts","limit","log","fetchCategories","fetchCategoryBySlug","slug","fetchCategoryTitle","id","title","rendered","fetchCategoryPosts","categoryId","fetchAllCategories","categories","Promise","all","map","category","info","posts","fetchArticle","fetchImage","img","SIZE","imageSize","sizes","medium","source_url","large","full","sizes_2","media_details"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAO,MAAMC,SAAS,GAAG,gBAAlB;AACP,OAAO,MAAMC,QAAQ,GAAI,WAAUD,SAAU,gBAAtC;AACP,OAAO,MAAME,WAAW,GAAG,CAApB;AAEP,OAAO,MAAMC,WAAW,GAAG,OAAOC,OAAP,EAAgBC,IAAI,GAAG,CAAvB,KAA6B;AACtD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,iBAAgBG,OAAQ,SAAQC,IAAK,EAAlD,CAAvB;AACA,UAAME,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMG,UAAU,GAAG,OAAOC,KAAK,GAAGX,WAAf,EAA4BG,IAAI,GAAG,CAAnC,KAAyC;AACjEK,EAAAA,OAAO,CAACI,GAAR,CAAY,mBAAZ;;AACA,MAAI;AACF,UAAMR,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,mBAAkBY,KAAM,SAAQR,IAAK,EAAlD,CAAvB;AACA,UAAME,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAP;AACD;AACF,CATM;AAWP,OAAO,MAAMM,eAAe,GAAG,YAAY;AACzC,MAAI;AACF,UAAMT,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,aAAb,CAAvB;AACA,UAAMM,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAc,6BAAd,EAA6CF,GAA7C,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMO,mBAAmB,GAAG,MAAMC,IAAN,IAAc;AAC/C,QAAMX,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,oBAAmBgB,IAAK,EAArC,CAAvB;AACA,QAAMV,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,SAAOD,IAAI,CAAC,CAAD,CAAX;AACD,CAJM;AAMP,OAAO,MAAMW,kBAAkB,GAAG,MAAMC,EAAN,IAAY;AAC5C,MAAI;AACF,UAAMb,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,qBAAoBkB,EAAG,EAApC,CAAvB;AACA,UAAMZ,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAI,CAACa,KAAL,CAAWC,QAAlB;AACD,GAJD,CAIE,OAAOZ,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMa,kBAAkB,GAAG,OAAOC,UAAP,EAAmBV,KAAK,GAAGX,WAA3B,EAAwCG,IAAI,GAAG,CAA/C,KAAqD;AACrF,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,qBAAoBsB,UAAW,aAAYV,KAAM,SAAQR,IAAK,EAA3E,CAAvB;AACA,UAAME,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMe,kBAAkB,GAAG,YAAY;AAC5C,QAAMC,UAAU,GAAG,MAAMV,eAAe,EAAxC;AAEA,SAAOW,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,GAAX,CAAe,MAAMC,QAAN,IAAkB;AAClD,WAAO;AACLC,MAAAA,IAAI,EAAED,QADD;AAELE,MAAAA,KAAK,EAAE,MAAMT,kBAAkB,CAACO,QAAQ,CAACV,EAAV;AAF1B,KAAP;AAID,GALkB,CAAZ,CAAP;AAMD,CATM;AAWP,OAAO,MAAMa,YAAY,GAAG,MAAOf,IAAP,IAAgB;AAC1C,MAAI;AACF,UAAMX,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,eAAcgB,IAAK,EAAhC,CAAvB;AACA,UAAMV,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,WAAOD,IAAI,CAAC,CAAD,CAAX;AACD,GAJD,CAIE,OAAOE,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCF,GAAtC,CAAP;AACD;AACF,CARM;AAUP,OAAO,MAAMwB,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AAC7C,QAAMC,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAIA,KAAK,CAACC,MAAV,EAAkB;AAChB,aAAOD,KAAK,CAACC,MAAN,CAAaC,UAApB;AACD,KAFD,MAEO,IAAIF,KAAK,CAACG,KAAV,EAAiB;AACtB,aAAOH,KAAK,CAACG,KAAN,CAAYD,UAAnB;AACD,KAFM,MAEA;AACL,aAAOF,KAAK,CAACI,IAAN,CAAWF,UAAlB;AACD;AACF,GARD;;AAUA,MAAI;AACF,UAAMjC,GAAG,GAAG,MAAMP,KAAK,CAAE,GAAEE,QAAS,UAASiC,GAAI,EAA1B,CAAvB;AACA,UAAM3B,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AACA,UAAMkC,OAAO,GAAGnC,IAAI,CAACoC,aAAL,CAAmBN,KAAnC;;AAEA,QAAI,CAACF,IAAL,EAAW;AACT,aAAOC,SAAS,CAACM,OAAD,CAAhB;AACD,KAFD,MAEO;AACL,cAAQP,IAAR;AACE,aAAK,QAAL;AACEzB,UAAAA,OAAO,CAACI,GAAR,CAAY,QAAZ;AACA,iBAAO4B,OAAO,CAACJ,MAAR,GAAiBI,OAAO,CAACJ,MAAR,CAAeC,UAAhC,GAA6CH,SAAS,CAACM,OAAD,CAA7D;;AACF,aAAK,OAAL;AACEhC,UAAAA,OAAO,CAACI,GAAR,CAAY,OAAZ;AACA,iBAAO4B,OAAO,CAACF,KAAR,GAAgBE,OAAO,CAACF,KAAR,CAAcD,UAA9B,GAA2CH,SAAS,CAACM,OAAD,CAA3D;;AACF,aAAK,MAAL;AACEhC,UAAAA,OAAO,CAACI,GAAR,CAAY,MAAZ;AACA,iBAAO4B,OAAO,CAACD,IAAR,GAAeC,OAAO,CAACD,IAAR,CAAaF,UAA5B,GAAyCH,SAAS,CAACM,OAAD,CAAzD;AATJ;AAWD;AACF,GApBD,CAoBE,OAAOjC,GAAP,EAAY;AACZ,WAAOC,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCuB,GAAtC,EAA2CzB,GAA3C,CAAP;AACD;AACF,CAlCM","sourcesContent":["import fetch from 'isomorphic-unfetch'\nexport const SITE_NAME = 'techcrunch.com'\nexport const BASE_URL = `https://${SITE_NAME}/wp-json/wp/v2`\nexport const POSTS_LIMIT = 4\n\nexport const searchPosts = async (keyword, page = 1) => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?search=${keyword}&page=${page}`)\n    const data = await res.json()\n    return data\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const fetchPosts = async (limit = POSTS_LIMIT, page = 1) => {\n  console.log('fetching posts...')\n  try {\n    const res = await fetch(`${BASE_URL}/posts?per_page=${limit}&page=${page}`)\n    const data = await res.json()\n    return data\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const fetchCategories = async () => {\n  try {\n    const res = await fetch(`${BASE_URL}/categories`)\n    const data = await res.json()\n    return data\n  } catch (err) {\n    return console.error('failed to fetch categories:', err)\n  }\n}\n\nexport const fetchCategoryBySlug = async slug => {\n  const res = await fetch(`${BASE_URL}/categories?slug=${slug}`)\n  const data = await res.json()\n  return data[0]\n}\n\nexport const fetchCategoryTitle = async id => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?categories=${id}`)\n    const data = await res.json()\n    return data.title.rendered\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const fetchCategoryPosts = async (categoryId, limit = POSTS_LIMIT, page = 1) => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?categories=${categoryId}&per_page=${limit}&page=${page}`)\n    const data = await res.json()\n    return data\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const fetchAllCategories = async () => {\n  const categories = await fetchCategories()\n\n  return Promise.all(categories.map(async category => {\n    return {\n      info: category,\n      posts: await fetchCategoryPosts(category.id)\n    }\n  }))\n}\n\nexport const fetchArticle = async (slug) => {\n  try {\n    const res = await fetch(`${BASE_URL}/posts?slug=${slug}`)\n    const data = await res.json()\n    return data[0]\n  } catch (err) {\n    return console.error('fetch article error:', err)\n  }\n}\n\nexport const fetchImage = async (img, SIZE) => {\n  const imageSize = (sizes) => {\n    if (sizes.medium) {\n      return sizes.medium.source_url\n    } else if (sizes.large) {\n      return sizes.large.source_url\n    } else {\n      return sizes.full.source_url\n    }\n  }\n\n  try {\n    const res = await fetch(`${BASE_URL}/media/${img}`)\n    const data = await res.json()\n    const sizes_2 = data.media_details.sizes\n\n    if (!SIZE) {\n      return imageSize(sizes_2)\n    } else {\n      switch (SIZE) {\n        case 'medium':\n          console.log('medium')\n          return sizes_2.medium ? sizes_2.medium.source_url : imageSize(sizes_2)\n        case 'large':\n          console.log('large')\n          return sizes_2.large ? sizes_2.large.source_url : imageSize(sizes_2)\n        case 'full':\n          console.log('full')\n          return sizes_2.full ? sizes_2.full.source_url : imageSize(sizes_2)\n      }\n    }\n  } catch (err) {\n    return console.error('unable to fetch img:', img, err)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}